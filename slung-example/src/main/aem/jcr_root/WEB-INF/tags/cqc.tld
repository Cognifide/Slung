<?xml version="1.0" encoding="UTF-8" ?>
<taglib xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
	version="2.0">
	<description>CQ Commons taglib</description>
	<display-name>CQ Commons taglib</display-name>
	<tlib-version>0.5.3</tlib-version>
	<short-name>cqc</short-name>
	<uri>http://cognifide.com/jsp/cqc</uri>
	<tag>
		<description>Output configuration value</description>
		<name>configValue</name>
		<tag-class>com.cognifide.cq.commons.config.impl.ConfigValueTag</tag-class>
		<body-content>empty</body-content>
		<attribute>
			<description>Name of the key</description>
			<name>key</name>
			<required>true</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>If the label is not found, tag will display provided key. You can prevent that behaviour setting true to this property.</description>
			<name>hideIfNoKey</name>
			<required>false</required>
			<type>boolean</type>
		</attribute>
	</tag>
	<tag>
		<description>Print navigation</description>
		<name>navigation</name>
		<tag-class>com.cognifide.cq.commons.navigation.impl.tag.NavigationTag</tag-class>
		<body-content>scriptless</body-content>
		<attribute>
			<description>Root of the navigation</description>
			<name>root</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>com.cognifide.cq.commons.navigation.api.NavigationNode</type>
		</attribute>
		<attribute>
			<description>Root list</description>
			<name>roots</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>java.util.List</type>
		</attribute>
	</tag>
	<tag>
		<description>Print navigation element</description>
		<name>startList</name>
		<tag-class>com.cognifide.cq.commons.navigation.impl.tag.StartListTag</tag-class>
		<body-content>scriptless</body-content>
		<attribute>
			<description>Variable name</description>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
	</tag>
	<tag>
		<description>Print navigation element</description>
		<name>endList</name>
		<tag-class>com.cognifide.cq.commons.navigation.impl.tag.EndListTag</tag-class>
		<body-content>scriptless</body-content>
		<attribute>
			<description>Variable name</description>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
	</tag>
	<tag>
		<description>Print navigation element</description>
		<name>startItem</name>
		<tag-class>com.cognifide.cq.commons.navigation.impl.tag.StartItemTag</tag-class>
		<body-content>scriptless</body-content>
		<attribute>
			<description>Variable name</description>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
		<attribute>
			<description>Name of the variable with iteration status</description>
			<name>varChildStatus</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
	</tag>
	<tag>
		<description>Print navigation element</description>
		<name>endItem</name>
		<tag-class>com.cognifide.cq.commons.navigation.impl.tag.EndItemTag</tag-class>
		<body-content>scriptless</body-content>
		<attribute>
			<description>Variable name</description>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
		<attribute>
			<description>Name of the variable with iteration status</description>
			<name>varChildStatus</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
	</tag>
	<!-- <cqc:disableWcm /> -->
	<tag>
		<description>Disables edit mode of components &lt;b&gt;included&lt;/b&gt; within the tag.</description>
		<name>disableWcm</name>
		<tag-class>com.cognifide.cq.commons.taglib.DisableWcmTag</tag-class>
		<body-content>empty</body-content>
	</tag>
	<!-- <cqc:include /> -->
	<tag>
		<description>
			Extended version of the cq:include tag. In addition to the original behaviour allows controlling
			the WCM mode inside the include, and disabling the decoration markup that's added by WCM by
			default. The control is done either at component level - using custom properties stored in a
			component's node, or at the include level - using tag's attributes. Tag's attributes have higher
			priority than component's meta-data. To force WCM disable / enable set the cog:disableWcm property
			to true / false respectively (String and Boolean property supported). To set in which modes the 
			decoration is enabled, set the cog:enableDecorationInModes property either as String or 
			multi-value String with one or more of following: disabled, edit, read-only, preview, design, 
			author, publish, all, none.
			
		</description>
		<name>include</name>
		<tag-class>com.cognifide.cq.commons.taglib.include.IncludeTag</tag-class>
		<body-content>empty</body-content>
		<attribute>
			<description>
				Comma separated list of additional CSS class names that will be added to wrapping markup. 
			</description>
			<name>additionalCssClassNames</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				If true, the component is always included with WCM disabled (WCMMode.fromRequest(request) == 
				WCMMode.Disabled). If false - the current WCM mode is passed. False by default. Note, that 
				thanks to the include hierarchy, this setting is populated to all child components. 
				This attribute overrides component's cog:disableWcm property.
			</description>
			<name>disableWcm</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				A decoration is an additional markup required by WCM to draw dialog box and added around the 
				include. If true, the decoration  of current component is applied as in default cq:include. 
				If false, no decoration is added. True by default. This configuration setting is not populated
				to children components.
				This attribute overrides component's cog:disableDecorationInModes property.
			</description>
			<name>enableDecoration</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>if true, tag flushes the output before including the target; false by default</description>
			<name>flush</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
			<type>boolean</type>
		</attribute>
		<attribute>
			<description>
				A boolean controlling whether the component hierarchy should be ignored for script resolution. 
				If true, only the search paths are respected. False by default.
			</description>
			<name>ignoreComponentHierarchy</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				The path to the resource object to include in the current request processing. If this path is 
				relative it is appended to the path of the current resource whose script is including the 
				given resource. Either resource or path must be specified. If both are specified, the resource 
				takes precedences.
			</description>
			<name>path</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				The resource type of a resource to include. If the resource to be included is specified with 
				the path attribute, which cannot be resolved to a resource, the tag may create a synthetic 
				resource object out of the path and this resource type. If the resource type is set the path 
				must be the exact path to a resource object. That is, adding parameters, selectors and 
					extensions to the path is not supported if the resource type is set.
			</description>
			<name>resourceType</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				The JSP script to include. Either path and resourceType, or script must be specified.
			</description>
			<name>script</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
	</tag>
	<!-- <cqc:validate /> -->
	<tag>
		<description>
			If given model is valid - does nothing but evaluates body. If given model is empty - displays 
			"empty model" message. If model is invalid, displays all validation errors.
		</description>
		<name>validate</name>
		<tag-class>com.cognifide.cq.commons.validation.impl.ValidateTag</tag-class>
		<body-content>JSP</body-content>
		<attribute>
			<description>object that needs to be validated</description>
			<name>object</name>
			<required>true</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				Heading included at the top of error list displayed in case of errors. By default "Validation
				 messages:"
			</description>
			<name>title</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				Indicates if validation errors should be displayed. If it's set to false and there are
				validation errors, neither body of the tag will be evaluated, nor error messages listed,
				resulting in blank area. If it's set to true and there are validation errors, they will be
				listed instead of tag body.
			</description>
			<name>displayErrors</name>
			<required>false</required>
			<rtexprvalue>true</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				Variable with validation result
			</description>
			<name>var</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
		<attribute>
			<description>
				Additional classes to be added to the placeholder div when the component is blank.
			</description>
			<name>emptyPlaceholderClass</name>
			<required>false</required>
			<rtexprvalue>false</rtexprvalue>
		</attribute>
	</tag>
</taglib>